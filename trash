def search_results(request):
    
    if 'image' in request.GET and request.GET["image"]:
        search_term = request.GET.get("image")
        searched_images = Image.search_by_image_description(search_term)
        message = f"{search_term}"

        return render(request, 'search.html',{"message":message,"images": searched_images})

    elif 'image' in request.GET and request.GET["image"]:
        search_term = request.GET.get("image")
        searched_images = Image.search_by_location(search_term)
        message = f"{search_term}"

        return render(request, 'search.html',{"message":message,"images": searched_images})

    elif 'image' in request.GET and request.GET["image"]:
        search_term = request.GET.get("image")
        searched_images = Image.search_by_category(search_term)
        message = f"{search_term}"

        return render(request, 'search.html',{"message":message,"images": searched_images})

    elif 'image' in request.GET and request.GET["image"]:
        search_term = request.GET.get("image")
        searched_images = Image.search_by_image_name(search_term)
        message = f"{search_term}"

        return render(request, 'search.html',{"message":message,"images": searched_images})

    else:
        message = "You haven't searched for any term"
        return render(request, 'search.html',{"message":message})



 <p>Description: {{image.image_description}}</p>
     <p>Location taken: {{image.location}}</p>
     <p>Category: {{image.category}}</p>
     <p>Posted on:{{image.pub_date}}</p>
   </div>


   <div class="row">
    <h1 class="text-center">{{image.image_name|title}}</h1>
  </div>

   <div class="row">

     <p>Description: {{image.image_description}}</p>
     <p>Location taken: {{image.location}}</p>
     <p>Category: {{image.category}}</p>
     <p>Posted on:{{image.pub_date}}</p>
   </div>


   <div>
        {% for location in locations %}
            <a class="btn btn-outline-info btn-sm" id="btn"
               href="/location/{{location.name}}">{{location.name}}</a>
        {%endfor%}
    </div>


# Create your tests here.

class EditorTestClass(TestCase):

    def setUp(self):
        self.james= Editor(first_name = 'James', last_name = 'Muriuki', email = 'james"moringaschool.com')

    def test_instance(self):
        self.assertTrue(isinstance(self.james, Editor))

    def test_save_method(self):
        self.james.save_editor()
        editors = Editor.objects.all()
        self.assertTrue(len(editors)>0)

class ImageTestClass(TestCase):
    
    def setUp(self):
        # Creating a new image and saving it
        self.james= Editor(first_name = 'James', last_name ='Muriuki', email ='james@moringaschool.com')
        self.james.save_editor()

        # Creating a new tag and saving it
        self.new_tag = tags(name = 'testing')
        self.new_tag.save()

        self.new_image= Image(title = 'Test Image',post = 'This is a random test Post',editor = self.james)
        self.new_image.save()

        self.new_image.tags.add(self.new_tag)


    def tearDown(self):
        Editor.objects.all().delete()
        tags.objects.all().delete()
        Image.objects.all().delete()

        @classmethod
    def get_image_by_id(cls, id):
        pics = cls.objects.filter(id=id).all()
        return pics
